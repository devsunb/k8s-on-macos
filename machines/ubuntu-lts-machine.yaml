#
# Kubernetes node (machine) template based on Ubuntu Cloud Image
#

# VM type: "qemu" or "vz" (on macOS 13 and later).
vmType: qemu

# OpenStack-compatible (cloud-init) disk image.
images:
- location: "https://cloud-images.ubuntu.com/releases/22.04/release/ubuntu-22.04-server-cloudimg-arm64.img"
  arch: "aarch64"

# Virtual Machine (VM) specification (CPUs, RAM and Disk)
cpus: 2
memory: "2GiB"
disk: "8GiB"

# Networking configuration
# Use limactl create / start --set='.networks[].macAddress="52:55:55:12:34:56"' to set unique mac address to each VM created
# https://github.com/lima-vm/socket_vmnet/tree/v1.1.2#how-to-use-static-ip-addresses
networks:
- lima: shared
  macAddress: "12:34:56:78:9A:BC"

# Port forwarding rules. Expose Kubernetes nodePort range to host
portForwards:
- guestPortRange: [30000, 32767]
  hostPortRange: [30000, 32767]
  hostIP:  "0.0.0.0"

# Host mount for local-path-provisioner
mountType: 9p
mounts:
- location: "~/.lima/_disks"
  mountPoint: "/opt/local-path-provisioner"
  writable: true

# Enable system-wide (aka rootful)  containerd and its dependencies (BuildKit, Stargz Snapshotter)
containerd:
  system: true
  user: false

provision:

# https://kubernetes.io/docs/setup/production-environment/container-runtimes/#forwarding-ipv4-and-letting-iptables-see-bridged-traffic
- mode: system
  script: |
    #!/bin/bash
    set -eux -o pipefail

    cat <<EOF | tee /etc/modules-load.d/k8s.conf
    overlay
    br_netfilter
    ip_vs
    ip_vs_rr
    ip_vs_wrr
    ip_vs_sh
    EOF
    
    modprobe overlay
    modprobe br_netfilter
    modprobe ip_vs
    modprobe ip_vs_rr
    modprobe ip_vs_wrr
    modprobe ip_vs_sh
    
    cat <<EOF | tee /etc/sysctl.d/k8s.conf
    net.bridge.bridge-nf-call-iptables  = 1
    net.bridge.bridge-nf-call-ip6tables = 1
    net.ipv4.ip_forward                 = 1
    EOF
    
    sysctl --system

# Update installed packages and install packages needed by K8s
# Install kubeadm, kubectl and kubelet
- mode: system
  script: |
    #!/bin/bash
    set -eux -o pipefail

    apt-get update
    apt-get install -y apt-transport-https ca-certificates curl

    curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.28/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
    echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.28/deb/ /' | sudo tee /etc/apt/sources.list.d/kubernetes.list

    apt-get update
    apt-get install -y kubelet kubeadm kubectl
    apt-mark hold kubelet kubeadm kubectl
    systemctl enable --now kubelet

# Create / Override containerd config and set cgroup driver for runc to systemd
# https://kubernetes.io/docs/setup/production-environment/container-runtimes/#containerd-systemd
- mode: system
  script: |
    #!/bin/bash
    set -eux -o pipefail

    mkdir -p /etc/containerd
    containerd config default > /etc/containerd/config.toml
    sed -i 's/            SystemdCgroup = false/            SystemdCgroup = true/' /etc/containerd/config.toml
    systemctl restart containerd

# Install Cilium CLI
# https://docs.cilium.io/en/stable/gettingstarted/k8s-install-default/
- mode: system
  script: |
    #!/bin/bash
    set -eux -o pipefail

    CILIUM_CLI_VERSION=$(curl -s https://raw.githubusercontent.com/cilium/cilium-cli/main/stable.txt)
    CLI_ARCH=amd64
    if [ "$(uname -m)" = "aarch64" ]; then CLI_ARCH=arm64; fi
    curl -L --fail --remote-name-all https://github.com/cilium/cilium-cli/releases/download/${CILIUM_CLI_VERSION}/cilium-linux-${CLI_ARCH}.tar.gz{,.sha256sum}
    sha256sum --check cilium-linux-${CLI_ARCH}.tar.gz.sha256sum
    tar xzvfC cilium-linux-${CLI_ARCH}.tar.gz /usr/local/bin
    rm cilium-linux-${CLI_ARCH}.tar.gz{,.sha256sum}

